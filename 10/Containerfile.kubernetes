# ARGs for versioning. These can be overridden at build time.
ARG KUBE_VERSION
ARG CONTAINERD_VERSION="2.1.2" # May not directly map to containerd.io package version
ARG CONTAINERD_SHA256 # For reference if downloading binaries directly
ARG CNI_PLUGINS_VERSION="v1.7.1" # For reference if downloading binaries directly
ARG CNI_PLUGINS_SHA256 # For reference if downloading binaries directly
ARG TARGETARCH="amd64" # Assuming amd64, can be overridden

# The final image will be based on the local almalinux-bootc image.
FROM localhost/almalinux-bootc:latest

ARG KUBE_VERSION
ARG CONTAINERD_VERSION
ARG CNI_PLUGINS_VERSION
ARG TARGETARCH
ARG PAUSE_IMAGE

COPY 10/kubernetes/etc/ /etc/

# Replace placeholder in containerd config
RUN sed -i "s|__PAUSE_IMAGE_PLACEHOLDER__|${PAUSE_IMAGE}|g" /etc/containerd/config.toml

# 1. Set up repositories
# Substitute K8S_STABLE_VERSION in the copied kubernetes.repo file
RUN K8S_STABLE_VERSION=$(echo "${KUBE_VERSION}" | sed 's/\([0-9]*\.[0-9]*\)\..*/\1/') && \
    echo "DEBUG: KUBE_VERSION=${KUBE_VERSION}, K8S_STABLE_VERSION=${K8S_STABLE_VERSION}" && \
    sed -i "s|__K8S_STABLE_VERSION_PLACEHOLDER__|${K8S_STABLE_VERSION}|g" /etc/yum.repos.d/kubernetes.repo && \
    cat /etc/yum.repos.d/kubernetes.repo

# Containerd repository (Docker's repository)
RUN dnf install -y dnf-utils && \
    dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo && \
    echo "INFO: Forcing Docker CE repo to use CentOS 10 channel for AlmaLinux 10 compatibility" && \
    sed -i 's/$releasever/10/' /etc/yum.repos.d/docker-ce.repo && \
    cat /etc/yum.repos.d/docker-ce.repo

# 2. Install packages
# Note: KUBE_VERSION should be in a format like 1.33.1 (without -0 suffix unless required by specific package)
RUN dnf install -y \
    kubelet-${KUBE_VERSION} \
    kubeadm-${KUBE_VERSION} \
    kubectl-${KUBE_VERSION} \
    containerd.io \
    kubernetes-cni \
    --disableexcludes=kubernetes && \
    dnf clean all

# Remove cni directories as we will create them later (if they were created by kubernetes-cni RPM)
RUN rm -rf /opt/cni/bin/* && rm -rf /etc/cni/net.d/* # Clear out potential RPM-installed CNI files before manual install

# 3. Install CNI Plugins manually
RUN CNI_TARBALL="cni-plugins-linux-${TARGETARCH}-${CNI_PLUGINS_VERSION}.tgz" && \
    CNI_DOWNLOAD_URL="https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/${CNI_TARBALL}" && \
    echo "Downloading CNI plugins from ${CNI_DOWNLOAD_URL}" && \
    mkdir -p /opt/cni/bin /tmp && \
    curl -sSL "${CNI_DOWNLOAD_URL}" -o "/tmp/${CNI_TARBALL}" && \
    echo "Verifying CNI plugins checksum..." && \
    echo "${CNI_PLUGINS_SHA256}  /tmp/${CNI_TARBALL}" | sha256sum -c - && \
    echo "Extracting CNI plugins to /opt/cni/bin/" && \
    tar -xzf "/tmp/${CNI_TARBALL}" -C /opt/cni/bin/ && \
    echo "Cleaning up CNI tarball..." && \
    rm "/tmp/${CNI_TARBALL}"